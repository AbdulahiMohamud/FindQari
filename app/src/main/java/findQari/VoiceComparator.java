/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package findQari;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.AudioInputStream;
import java.io.File;

public class VoiceComparator {
    public static void main(String[] args) throws Exception {
        File file1 = new File("app/src/main/resources/StarWars1.wav"); // Replace with the path to your first voice file
        File file2 = new File("app/src/main/resources/StarWars3.wav"); // Replace with the path to your second voice file

        AudioInputStream audioStream1 = AudioSystem.getAudioInputStream(file1);
        AudioInputStream audioStream2 = AudioSystem.getAudioInputStream(file2);

// Resample the audio streams to a common sample rate
        AudioInputStream resampledAudioStream1 = AudioUtils.resample(audioStream1, 44100.0f);
        AudioInputStream resampledAudioStream2 = AudioUtils.resample(audioStream2, 44100.0f);

// Convert the audio streams to a common number of channels
        AudioInputStream convertedAudioStream1 = AudioUtils.convertChannels(resampledAudioStream1, 1);
        AudioInputStream convertedAudioStream2 = AudioUtils.convertChannels(resampledAudioStream2, 1);

// Convert the AudioInputStreams to byte arrays
        byte[] audioData1 = convertedAudioStream1.readAllBytes();
        byte[] audioData2 = convertedAudioStream2.readAllBytes();

// Compute the cross-correlation of the two signals
        double[] xcorr = xcorr(audioData1, audioData2);

// Find the maximum correlation value and the lag at which it occurs
        double maxCorr = Double.NEGATIVE_INFINITY;
        int maxLag = 0;
        for (int i = 0; i < xcorr.length; i++) {
            if (xcorr[i] > maxCorr) {
                maxCorr = xcorr[i];
                maxLag = i;
            }
        }

        // Print the results
        System.out.println("Maximum correlation: " + maxCorr);
        System.out.println("Time lag: " + maxLag);
    }

    public static double[] xcorr(byte[] x, byte[] y) {
        int N = x.length;
        int M = y.length;
        double[] result = new double[N + M - 1];
        for (int i = 0; i < N + M - 1; i++) {
            double sum = 0;
            for (int j = Math.max(0, i - M + 1); j <= Math.min(i, N - 1); j++) {
                sum += x[j] * y[i - j];
            }
            result[i] = sum;
        }
        return result;
    }
}


